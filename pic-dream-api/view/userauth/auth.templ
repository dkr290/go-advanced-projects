package userauth

import (
	"github.com/dkr290/go-advanced-projects/pic-dream-api/view/layout"
	"github.com/nedpals/supabase-go"
)

templ LogIn() {
	@layout.App(false) {
		<div class="flex justify-center mt-[calc(100vh-100vh+8rem)]">
			<div class="max-w-md w-full bg-base-300 py-10 px-8 rounded-xl">
				<h1 class="text-center text-xl font-black mb-8">LogIn to Pic API</h1>
				@LoginForm(supabase.UserCredentials{}, LoginErrors{})
			</div>
		</div>
	}
}

templ SignUp() {
	@layout.App(false) {
		<div class="flex justify-center mt-[calc(100vh-100vh+8rem)]">
			<div class="max-w-md w-full bg-base-300 py-10 px-8 rounded-xl">
				<h1 class="text-center text-xl font-black mb-8">SignUp to Pic API</h1>
				@SignUpForm(SignupParams{}, SignupErrors{})
			</div>
		</div>
	}
}

templ SignupSuccess(email string) {
	<div>A confirmation email has been send to: <span class="font-semibold text-success">{ email }</span></div>
}

type LoginErrors struct {
	Email              string
	Password           string
	InvalidCredentials string
}

type SignupParams struct {
	Email           string
	Password        string
	ConfirmPassword string
}

type SignupErrors struct {
	Email           string
	Password        string
	ConfirmPassword string
}

templ SignUpForm(params SignupParams, errors SignupErrors) {
	<form hx-post="/signup" hx-swap="outerHTML" class="space-y-4">
		<div class="w-full">
			<div class="label">
				<span class="label-text">Email address</span>
			</div>
			<input
				type="email"
				value={ params.Email }
				name="email"
				required
				autocoimplete="off"
				placeholder="email@email.com"
				class="input input-bordered w-full"
			/>
			if len(errors.Email) > 0 {
				<div class="text-sm text-error">
					<div class="label">
						<span class="label-text-alt text-error">{ errors.Email }</span>
					</div>
				</div>
			}
		</div>
		<div class="w-full">
			<div class="label">
				<span class="label-text">Password</span>
			</div>
			<input type="password" name="password" required autocomplete="off" class="input input-bordered w-full"/>
			if len(errors.Password) > 0 {
				<div class="label">
					<span class="label-text-alt text-error">{ errors.Password }</span>
				</div>
			}
		</div>
		<div class="w-full">
			<div class="label">
				<span class="label-text">Confirm Password</span>
			</div>
			<input type="password" name="confirmPassword" required autocomplete="off" class="input input-bordered w-full"/>
			if len(errors.ConfirmPassword) > 0 {
				<div class="label">
					<span class="label-text-alt text-error">{ errors.ConfirmPassword }</span>
				</div>
			}
		</div>
		<button type="submit" class="btn btn-active btn-primary w-full">Login<i class="fa-solid fa-arrow-right"></i></button>
	</form>
}

templ LoginForm(creds supabase.UserCredentials, errors LoginErrors) {
	<form hx-post="/login" hx-swap="outerHTML" class="space-y-4">
		<div class="w-full">
			<div class="label">
				<span class="label-text">Email address</span>
			</div>
			<input
				type="email"
				value={ creds.Email }
				name="email"
				required
				autocoimplete="off"
				placeholder="Type here"
				class="input input-bordered w-full"
			/>
			if len(errors.Email) > 0 {
				<div class="text-sm text-error">
					<div class="label">
						<span class="label-text-alt text-error">{ errors.Email }</span>
					</div>
				</div>
			}
		</div>
		<div class="w-full">
			<div class="label">
				<span class="label-text">Password</span>
			</div>
			<input
				type="password"
				name="password"
				required
				autocomplete="off"
				placeholder="Type here"
				class="input input-bordered w-full"
			/>
			if len(errors.Password) > 0 {
				<div class="label">
					<span class="label-text-alt text-error">{ errors.Password }</span>
				</div>
			}
		</div>
		if len(errors.InvalidCredentials) > 0 {
			<div class="text-sm text-error">
				{ errors.InvalidCredentials }
			</div>
		}
		<button type="submit" class="btn btn-active btn-primary w-full">Login<i class="fa-solid fa-arrow-right"></i></button>
	</form>
}

templ CallbackScript() {
	<script>
	// Get the access token from the URL fragment
	var hash = window.location.hash.substring(1);
	var params = new URLSearchParams(hash);
	var accessToken = params.get('access_token');

	if (accessToken) {
		// Redirect to the same URL but with the access token as a query parameter
		window.location.href = window.location.pathname + '?access_token=' + accessToken;
	} else {
		console.error('No access token found');
	}
</script>
}
